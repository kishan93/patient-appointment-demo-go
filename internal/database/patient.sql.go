// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patient.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (name, phone, email, age, weight, height, gender, address)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, phone, email, age, weight, height, gender, address, created_at, updated_at
`

type CreatePatientParams struct {
	Name    string
	Phone   pgtype.Text
	Email   string
	Age     pgtype.Int2
	Weight  pgtype.Numeric
	Height  pgtype.Numeric
	Gender  pgtype.Text
	Address pgtype.Text
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Age,
		arg.Weight,
		arg.Height,
		arg.Gender,
		arg.Address,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Age,
		&i.Weight,
		&i.Height,
		&i.Gender,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients WHERE id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePatient, id)
	return err
}

const getAllPatients = `-- name: GetAllPatients :many
SELECT id, name, phone, email, age, weight, height, gender, address, created_at, updated_at FROM patients
WHERE ($1::text = '' OR name::text ILIKE '%' || $1::text || '%')
ORDER BY
    CASE
        WHEN $2::text = 'name' THEN name
        WHEN $2::text = 'age' THEN age::TEXT
        ELSE created_at::TEXT
    END
    || CASE WHEN $3::text = 'DESC' THEN ' DESC' ELSE ' ASC' END
`

type GetAllPatientsParams struct {
	Name          string
	SortBy        string
	SortDirection string
}

func (q *Queries) GetAllPatients(ctx context.Context, arg GetAllPatientsParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, getAllPatients, arg.Name, arg.SortBy, arg.SortDirection)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Age,
			&i.Weight,
			&i.Height,
			&i.Gender,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientByID = `-- name: GetPatientByID :one
SELECT id, name, phone, email, age, weight, height, gender, address, created_at, updated_at FROM patients WHERE id = $1
`

func (q *Queries) GetPatientByID(ctx context.Context, id int32) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByID, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Age,
		&i.Weight,
		&i.Height,
		&i.Gender,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET
    name = COALESCE($2, name),
    phone = COALESCE($3, phone),
    email = COALESCE($4, email),
    age = COALESCE($5, age),
    weight = COALESCE($6, weight),
    height = COALESCE($7, height),
    gender = COALESCE($8, gender),
    address = COALESCE($9, address),
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, phone, email, age, weight, height, gender, address, created_at, updated_at
`

type UpdatePatientParams struct {
	ID      int32
	Name    string
	Phone   pgtype.Text
	Email   string
	Age     pgtype.Int2
	Weight  pgtype.Numeric
	Height  pgtype.Numeric
	Gender  pgtype.Text
	Address pgtype.Text
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatient,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Age,
		arg.Weight,
		arg.Height,
		arg.Gender,
		arg.Address,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Age,
		&i.Weight,
		&i.Height,
		&i.Gender,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
