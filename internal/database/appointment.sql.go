// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointment.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (patient_id, user_id, visit_date, visit_timestamp, patient_notes, doctor_notes)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at
`

type CreateAppointmentParams struct {
	PatientID      int32
	UserID         pgtype.Int4
	VisitDate      pgtype.Date
	VisitTimestamp pgtype.Timestamptz
	PatientNotes   pgtype.Text
	DoctorNotes    pgtype.Text
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.PatientID,
		arg.UserID,
		arg.VisitDate,
		arg.VisitTimestamp,
		arg.PatientNotes,
		arg.DoctorNotes,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.UserID,
		&i.VisitDate,
		&i.AppointmentSequence,
		&i.VisitTimestamp,
		&i.PatientNotes,
		&i.DoctorNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments WHERE id = $1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppointment, id)
	return err
}

const getAllAppointments = `-- name: GetAllAppointments :many
SELECT id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at FROM appointments
ORDER BY visit_date DESC
`

func (q *Queries) GetAllAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getAllAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.UserID,
			&i.VisitDate,
			&i.AppointmentSequence,
			&i.VisitTimestamp,
			&i.PatientNotes,
			&i.DoctorNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentByID = `-- name: GetAppointmentByID :one
SELECT id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at FROM appointments WHERE id = $1
`

func (q *Queries) GetAppointmentByID(ctx context.Context, id int32) (Appointment, error) {
	row := q.db.QueryRow(ctx, getAppointmentByID, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.UserID,
		&i.VisitDate,
		&i.AppointmentSequence,
		&i.VisitTimestamp,
		&i.PatientNotes,
		&i.DoctorNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppointmentBySequence = `-- name: GetAppointmentBySequence :one
SELECT id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at FROM appointments
WHERE visit_date = $1 AND appointment_sequence = $2
ORDER BY created_at
`

type GetAppointmentBySequenceParams struct {
	VisitDate           pgtype.Date
	AppointmentSequence int16
}

func (q *Queries) GetAppointmentBySequence(ctx context.Context, arg GetAppointmentBySequenceParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, getAppointmentBySequence, arg.VisitDate, arg.AppointmentSequence)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.UserID,
		&i.VisitDate,
		&i.AppointmentSequence,
		&i.VisitTimestamp,
		&i.PatientNotes,
		&i.DoctorNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppointmentsByDate = `-- name: GetAppointmentsByDate :many
SELECT id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at FROM appointments
WHERE visit_date = $1
ORDER BY appointment_sequence ASC
`

func (q *Queries) GetAppointmentsByDate(ctx context.Context, visitDate pgtype.Date) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByDate, visitDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.UserID,
			&i.VisitDate,
			&i.AppointmentSequence,
			&i.VisitTimestamp,
			&i.PatientNotes,
			&i.DoctorNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsByPatient = `-- name: GetAppointmentsByPatient :many
SELECT id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at FROM appointments
WHERE patient_id = $1
ORDER BY appointment_sequence ASC
`

func (q *Queries) GetAppointmentsByPatient(ctx context.Context, patientID int32) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByPatient, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.UserID,
			&i.VisitDate,
			&i.AppointmentSequence,
			&i.VisitTimestamp,
			&i.PatientNotes,
			&i.DoctorNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointment = `-- name: UpdateAppointment :one
UPDATE appointments
SET
    patient_notes = COALESCE($2, patient_notes),
    doctor_notes = COALESCE($3, doctor_notes),
    updated_at = NOW()
WHERE id = $1
RETURNING id, patient_id, user_id, visit_date, appointment_sequence, visit_timestamp, patient_notes, doctor_notes, created_at, updated_at
`

type UpdateAppointmentParams struct {
	ID           int32
	PatientNotes pgtype.Text
	DoctorNotes  pgtype.Text
}

func (q *Queries) UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, updateAppointment, arg.ID, arg.PatientNotes, arg.DoctorNotes)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.UserID,
		&i.VisitDate,
		&i.AppointmentSequence,
		&i.VisitTimestamp,
		&i.PatientNotes,
		&i.DoctorNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
